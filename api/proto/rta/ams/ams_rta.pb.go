// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ug/api/proto/rta/ams/ams_rta.proto

package ams

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RtaRequest_OperatingSystem int32

const (
	RtaRequest_OS_UNKNOWN RtaRequest_OperatingSystem = 0
	RtaRequest_OS_IOS     RtaRequest_OperatingSystem = 1
	RtaRequest_OS_ANDROID RtaRequest_OperatingSystem = 2
	RtaRequest_OS_WINDOWS RtaRequest_OperatingSystem = 3
	RtaRequest_OS_SYMBIAN RtaRequest_OperatingSystem = 4
	RtaRequest_OS_JAVA    RtaRequest_OperatingSystem = 5
)

var RtaRequest_OperatingSystem_name = map[int32]string{
	0: "OS_UNKNOWN",
	1: "OS_IOS",
	2: "OS_ANDROID",
	3: "OS_WINDOWS",
	4: "OS_SYMBIAN",
	5: "OS_JAVA",
}

var RtaRequest_OperatingSystem_value = map[string]int32{
	"OS_UNKNOWN": 0,
	"OS_IOS":     1,
	"OS_ANDROID": 2,
	"OS_WINDOWS": 3,
	"OS_SYMBIAN": 4,
	"OS_JAVA":    5,
}

func (x RtaRequest_OperatingSystem) String() string {
	return proto.EnumName(RtaRequest_OperatingSystem_name, int32(x))
}

func (RtaRequest_OperatingSystem) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0, 0}
}

type RtaRequest_RequestType int32

const (
	RtaRequest_NORMAL_REQUEST RtaRequest_RequestType = 0
	RtaRequest_CLICK_REQUEST  RtaRequest_RequestType = 1
)

var RtaRequest_RequestType_name = map[int32]string{
	0: "NORMAL_REQUEST",
	1: "CLICK_REQUEST",
}

var RtaRequest_RequestType_value = map[string]int32{
	"NORMAL_REQUEST": 0,
	"CLICK_REQUEST":  1,
}

func (x RtaRequest_RequestType) String() string {
	return proto.EnumName(RtaRequest_RequestType_name, int32(x))
}

func (RtaRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0, 1}
}

type RtaRequest_Device_DeviceIdTag int32

const (
	RtaRequest_Device_IDFA_MD5_DOUBTFUL      RtaRequest_Device_DeviceIdTag = 0
	RtaRequest_Device_IMEI_MD5_DOUBTFUL      RtaRequest_Device_DeviceIdTag = 1
	RtaRequest_Device_ANDROIDID_MD5_DOUBTFUL RtaRequest_Device_DeviceIdTag = 2
	RtaRequest_Device_MAC_MD5_DOUBTFUL       RtaRequest_Device_DeviceIdTag = 3
	RtaRequest_Device_OAID_MD5_DOUBTFUL      RtaRequest_Device_DeviceIdTag = 4
	RtaRequest_Device_OAID_DOUBTFUL          RtaRequest_Device_DeviceIdTag = 5
)

var RtaRequest_Device_DeviceIdTag_name = map[int32]string{
	0: "IDFA_MD5_DOUBTFUL",
	1: "IMEI_MD5_DOUBTFUL",
	2: "ANDROIDID_MD5_DOUBTFUL",
	3: "MAC_MD5_DOUBTFUL",
	4: "OAID_MD5_DOUBTFUL",
	5: "OAID_DOUBTFUL",
}

var RtaRequest_Device_DeviceIdTag_value = map[string]int32{
	"IDFA_MD5_DOUBTFUL":      0,
	"IMEI_MD5_DOUBTFUL":      1,
	"ANDROIDID_MD5_DOUBTFUL": 2,
	"MAC_MD5_DOUBTFUL":       3,
	"OAID_MD5_DOUBTFUL":      4,
	"OAID_DOUBTFUL":          5,
}

func (x RtaRequest_Device_DeviceIdTag) String() string {
	return proto.EnumName(RtaRequest_Device_DeviceIdTag_name, int32(x))
}

func (RtaRequest_Device_DeviceIdTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0, 1, 0}
}

type RtaRequest_Device_CacheDeviceIdType int32

const (
	RtaRequest_Device_IDFA_MD5      RtaRequest_Device_CacheDeviceIdType = 0
	RtaRequest_Device_IMEI_MD5      RtaRequest_Device_CacheDeviceIdType = 1
	RtaRequest_Device_OAID          RtaRequest_Device_CacheDeviceIdType = 2
	RtaRequest_Device_OAID_MD5      RtaRequest_Device_CacheDeviceIdType = 3
	RtaRequest_Device_ANDROIDID_MD5 RtaRequest_Device_CacheDeviceIdType = 4
	RtaRequest_Device_MAC_MD5       RtaRequest_Device_CacheDeviceIdType = 5
	RtaRequest_Device_NIL           RtaRequest_Device_CacheDeviceIdType = 6
)

var RtaRequest_Device_CacheDeviceIdType_name = map[int32]string{
	0: "IDFA_MD5",
	1: "IMEI_MD5",
	2: "OAID",
	3: "OAID_MD5",
	4: "ANDROIDID_MD5",
	5: "MAC_MD5",
	6: "NIL",
}

var RtaRequest_Device_CacheDeviceIdType_value = map[string]int32{
	"IDFA_MD5":      0,
	"IMEI_MD5":      1,
	"OAID":          2,
	"OAID_MD5":      3,
	"ANDROIDID_MD5": 4,
	"MAC_MD5":       5,
	"NIL":           6,
}

func (x RtaRequest_Device_CacheDeviceIdType) String() string {
	return proto.EnumName(RtaRequest_Device_CacheDeviceIdType_name, int32(x))
}

func (RtaRequest_Device_CacheDeviceIdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0, 1, 1}
}

type RtaRequest struct {
	// 请求唯一标识
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// true表示探测网络延迟
	IsPing bool `protobuf:"varint,2,opt,name=is_ping,json=isPing,proto3" json:"is_ping,omitempty"`
	// true表示测试请求，广告不会被展示和计费
	IsTest      bool                     `protobuf:"varint,3,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
	Impressions []*RtaRequest_Impression `protobuf:"bytes,4,rep,name=impressions,proto3" json:"impressions,omitempty"`
	Device      *RtaRequest_Device       `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	// 流量分类，微信为21，其他流量需要联系腾讯产品开通，否则默认为0
	SitesetId            uint64                  `protobuf:"varint,6,opt,name=siteset_id,json=sitesetId,proto3" json:"siteset_id,omitempty"`
	RequestInfo          *RtaRequest_RequestInfo `protobuf:"bytes,8,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RtaRequest) Reset()         { *m = RtaRequest{} }
func (m *RtaRequest) String() string { return proto.CompactTextString(m) }
func (*RtaRequest) ProtoMessage()    {}
func (*RtaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0}
}

func (m *RtaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtaRequest.Unmarshal(m, b)
}
func (m *RtaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtaRequest.Marshal(b, m, deterministic)
}
func (m *RtaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtaRequest.Merge(m, src)
}
func (m *RtaRequest) XXX_Size() int {
	return xxx_messageInfo_RtaRequest.Size(m)
}
func (m *RtaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RtaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RtaRequest proto.InternalMessageInfo

func (m *RtaRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RtaRequest) GetIsPing() bool {
	if m != nil {
		return m.IsPing
	}
	return false
}

func (m *RtaRequest) GetIsTest() bool {
	if m != nil {
		return m.IsTest
	}
	return false
}

func (m *RtaRequest) GetImpressions() []*RtaRequest_Impression {
	if m != nil {
		return m.Impressions
	}
	return nil
}

func (m *RtaRequest) GetDevice() *RtaRequest_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *RtaRequest) GetSitesetId() uint64 {
	if m != nil {
		return m.SitesetId
	}
	return 0
}

func (m *RtaRequest) GetRequestInfo() *RtaRequest_RequestInfo {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

// Impression为高级功能，详见QA
type RtaRequest_Impression struct {
	// 该请求范围内，Impression唯一标识
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 加密的广告位id
	PlacementId          string   `protobuf:"bytes,2,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RtaRequest_Impression) Reset()         { *m = RtaRequest_Impression{} }
func (m *RtaRequest_Impression) String() string { return proto.CompactTextString(m) }
func (*RtaRequest_Impression) ProtoMessage()    {}
func (*RtaRequest_Impression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0, 0}
}

func (m *RtaRequest_Impression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtaRequest_Impression.Unmarshal(m, b)
}
func (m *RtaRequest_Impression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtaRequest_Impression.Marshal(b, m, deterministic)
}
func (m *RtaRequest_Impression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtaRequest_Impression.Merge(m, src)
}
func (m *RtaRequest_Impression) XXX_Size() int {
	return xxx_messageInfo_RtaRequest_Impression.Size(m)
}
func (m *RtaRequest_Impression) XXX_DiscardUnknown() {
	xxx_messageInfo_RtaRequest_Impression.DiscardUnknown(m)
}

var xxx_messageInfo_RtaRequest_Impression proto.InternalMessageInfo

func (m *RtaRequest_Impression) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RtaRequest_Impression) GetPlacementId() string {
	if m != nil {
		return m.PlacementId
	}
	return ""
}

type RtaRequest_Device struct {
	Os RtaRequest_OperatingSystem `protobuf:"varint,1,opt,name=os,proto3,enum=media.RtaRequest_OperatingSystem" json:"os,omitempty"`
	// iOS设备的IDFA md5sum
	IdfaMd5Sum string `protobuf:"bytes,2,opt,name=idfa_md5sum,json=idfaMd5sum,proto3" json:"idfa_md5sum,omitempty"`
	// Android设备的IMEI md5sum
	ImeiMd5Sum string `protobuf:"bytes,3,opt,name=imei_md5sum,json=imeiMd5sum,proto3" json:"imei_md5sum,omitempty"`
	// Android设备的Android ID
	AndroidIdMd5Sum string `protobuf:"bytes,4,opt,name=android_id_md5sum,json=androidIdMd5sum,proto3" json:"android_id_md5sum,omitempty"`
	// 用户设备的mac地址
	MacMd5Sum string `protobuf:"bytes,5,opt,name=mac_md5sum,json=macMd5sum,proto3" json:"mac_md5sum,omitempty"`
	// Android设备的oaid  md5sum
	OaidMd5Sum string `protobuf:"bytes,6,opt,name=oaid_md5sum,json=oaidMd5sum,proto3" json:"oaid_md5sum,omitempty"`
	// 用户IP
	Ip string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	// Android设备的oaid 原值
	Oaid string `protobuf:"bytes,8,opt,name=oaid,proto3" json:"oaid,omitempty"`
	// 上述设备id是否可疑标志
	DoubtfulIdsList []RtaRequest_Device_DeviceIdTag `protobuf:"varint,9,rep,packed,name=doubtful_ids_list,json=doubtfulIdsList,proto3,enum=media.RtaRequest_Device_DeviceIdTag" json:"doubtful_ids_list,omitempty"`
	// 本次请求作为缓存key的设备号类型
	CachedDeviceidType   RtaRequest_Device_CacheDeviceIdType `protobuf:"varint,10,opt,name=cached_deviceid_type,json=cachedDeviceidType,proto3,enum=media.RtaRequest_Device_CacheDeviceIdType" json:"cached_deviceid_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *RtaRequest_Device) Reset()         { *m = RtaRequest_Device{} }
func (m *RtaRequest_Device) String() string { return proto.CompactTextString(m) }
func (*RtaRequest_Device) ProtoMessage()    {}
func (*RtaRequest_Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0, 1}
}

func (m *RtaRequest_Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtaRequest_Device.Unmarshal(m, b)
}
func (m *RtaRequest_Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtaRequest_Device.Marshal(b, m, deterministic)
}
func (m *RtaRequest_Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtaRequest_Device.Merge(m, src)
}
func (m *RtaRequest_Device) XXX_Size() int {
	return xxx_messageInfo_RtaRequest_Device.Size(m)
}
func (m *RtaRequest_Device) XXX_DiscardUnknown() {
	xxx_messageInfo_RtaRequest_Device.DiscardUnknown(m)
}

var xxx_messageInfo_RtaRequest_Device proto.InternalMessageInfo

func (m *RtaRequest_Device) GetOs() RtaRequest_OperatingSystem {
	if m != nil {
		return m.Os
	}
	return RtaRequest_OS_UNKNOWN
}

func (m *RtaRequest_Device) GetIdfaMd5Sum() string {
	if m != nil {
		return m.IdfaMd5Sum
	}
	return ""
}

func (m *RtaRequest_Device) GetImeiMd5Sum() string {
	if m != nil {
		return m.ImeiMd5Sum
	}
	return ""
}

func (m *RtaRequest_Device) GetAndroidIdMd5Sum() string {
	if m != nil {
		return m.AndroidIdMd5Sum
	}
	return ""
}

func (m *RtaRequest_Device) GetMacMd5Sum() string {
	if m != nil {
		return m.MacMd5Sum
	}
	return ""
}

func (m *RtaRequest_Device) GetOaidMd5Sum() string {
	if m != nil {
		return m.OaidMd5Sum
	}
	return ""
}

func (m *RtaRequest_Device) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RtaRequest_Device) GetOaid() string {
	if m != nil {
		return m.Oaid
	}
	return ""
}

func (m *RtaRequest_Device) GetDoubtfulIdsList() []RtaRequest_Device_DeviceIdTag {
	if m != nil {
		return m.DoubtfulIdsList
	}
	return nil
}

func (m *RtaRequest_Device) GetCachedDeviceidType() RtaRequest_Device_CacheDeviceIdType {
	if m != nil {
		return m.CachedDeviceidType
	}
	return RtaRequest_Device_IDFA_MD5
}

// 高级功能，仅CLICK_REQUEST = 1时才有此结构
type RtaRequest_RequestInfo struct {
	// 请求类型
	RequestType RtaRequest_RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=media.RtaRequest_RequestType" json:"request_type,omitempty"`
	// 触发本次请求的广告主ID，仅CLICK_REQUEST = 1时才有
	AdvertiserId uint64 `protobuf:"varint,2,opt,name=advertiser_id,json=advertiserId,proto3" json:"advertiser_id,omitempty"`
	// 触发本次请求的广告ID，仅CLICK_REQUEST = 1时才有
	AdId uint64 `protobuf:"varint,3,opt,name=ad_id,json=adId,proto3" json:"ad_id,omitempty"`
	// 标识每次rta请求的traceid，仅CLICK_REQUEST = 1时才有，和点击转发里的 __RTA_TRACE_ID__ 宏一致，关于RTA_TRACE_ID详见Q&A第11条
	ReqTraceId string `protobuf:"bytes,4,opt,name=req_trace_id,json=reqTraceId,proto3" json:"req_trace_id,omitempty"`
	// 点击id，仅CLICK_REQUEST = 1时才有
	ClickId              string   `protobuf:"bytes,5,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RtaRequest_RequestInfo) Reset()         { *m = RtaRequest_RequestInfo{} }
func (m *RtaRequest_RequestInfo) String() string { return proto.CompactTextString(m) }
func (*RtaRequest_RequestInfo) ProtoMessage()    {}
func (*RtaRequest_RequestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{0, 2}
}

func (m *RtaRequest_RequestInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtaRequest_RequestInfo.Unmarshal(m, b)
}
func (m *RtaRequest_RequestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtaRequest_RequestInfo.Marshal(b, m, deterministic)
}
func (m *RtaRequest_RequestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtaRequest_RequestInfo.Merge(m, src)
}
func (m *RtaRequest_RequestInfo) XXX_Size() int {
	return xxx_messageInfo_RtaRequest_RequestInfo.Size(m)
}
func (m *RtaRequest_RequestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RtaRequest_RequestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RtaRequest_RequestInfo proto.InternalMessageInfo

func (m *RtaRequest_RequestInfo) GetRequestType() RtaRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return RtaRequest_NORMAL_REQUEST
}

func (m *RtaRequest_RequestInfo) GetAdvertiserId() uint64 {
	if m != nil {
		return m.AdvertiserId
	}
	return 0
}

func (m *RtaRequest_RequestInfo) GetAdId() uint64 {
	if m != nil {
		return m.AdId
	}
	return 0
}

func (m *RtaRequest_RequestInfo) GetReqTraceId() string {
	if m != nil {
		return m.ReqTraceId
	}
	return ""
}

func (m *RtaRequest_RequestInfo) GetClickId() string {
	if m != nil {
		return m.ClickId
	}
	return ""
}

type DynamicProductInfo struct {
	// 商品库id
	ProductLib uint64 `protobuf:"varint,1,opt,name=product_lib,json=productLib,proto3" json:"product_lib,omitempty"`
	// 商品信息
	Products             []*DynamicProductInfo_Product `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DynamicProductInfo) Reset()         { *m = DynamicProductInfo{} }
func (m *DynamicProductInfo) String() string { return proto.CompactTextString(m) }
func (*DynamicProductInfo) ProtoMessage()    {}
func (*DynamicProductInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{1}
}

func (m *DynamicProductInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynamicProductInfo.Unmarshal(m, b)
}
func (m *DynamicProductInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynamicProductInfo.Marshal(b, m, deterministic)
}
func (m *DynamicProductInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicProductInfo.Merge(m, src)
}
func (m *DynamicProductInfo) XXX_Size() int {
	return xxx_messageInfo_DynamicProductInfo.Size(m)
}
func (m *DynamicProductInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicProductInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicProductInfo proto.InternalMessageInfo

func (m *DynamicProductInfo) GetProductLib() uint64 {
	if m != nil {
		return m.ProductLib
	}
	return 0
}

func (m *DynamicProductInfo) GetProducts() []*DynamicProductInfo_Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type DynamicProductInfo_Product struct {
	// 商品id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 商品推荐的权重，取值范围[1, 100]，取值越高越重要，如果不传或者为0，按商品回复的顺序排序
	Priority uint32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// 用户和商品产生互动的时间，unix时间戳，如果不传，则以回复RTA时间为准
	Timestamp            uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynamicProductInfo_Product) Reset()         { *m = DynamicProductInfo_Product{} }
func (m *DynamicProductInfo_Product) String() string { return proto.CompactTextString(m) }
func (*DynamicProductInfo_Product) ProtoMessage()    {}
func (*DynamicProductInfo_Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{1, 0}
}

func (m *DynamicProductInfo_Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynamicProductInfo_Product.Unmarshal(m, b)
}
func (m *DynamicProductInfo_Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynamicProductInfo_Product.Marshal(b, m, deterministic)
}
func (m *DynamicProductInfo_Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicProductInfo_Product.Merge(m, src)
}
func (m *DynamicProductInfo_Product) XXX_Size() int {
	return xxx_messageInfo_DynamicProductInfo_Product.Size(m)
}
func (m *DynamicProductInfo_Product) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicProductInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicProductInfo_Product proto.InternalMessageInfo

func (m *DynamicProductInfo_Product) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DynamicProductInfo_Product) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *DynamicProductInfo_Product) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RtaResponse struct {
	// 来自RtaRequest.id
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 返回的状态码，0为选择该流量，非0为过滤，该状态码落地日志，方便定位问题
	// 如果有impression，则优先看impression的回复
	Code        uint32                    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Impressions []*RtaResponse_Impression `protobuf:"bytes,3,rep,name=impressions,proto3" json:"impressions,omitempty"`
	// 收到RtaRequest至发送完RtaResponse的用时，单位:毫秒
	ProcessingTimeMs int32 `protobuf:"varint,4,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"`
	// 指定禁止的广告主账号，如果有impression，则优先看impression的回复
	ExcludeAdvertiserId []uint64 `protobuf:"varint,5,rep,packed,name=exclude_advertiser_id,json=excludeAdvertiserId,proto3" json:"exclude_advertiser_id,omitempty"`
	// 指定策略id的广告主，当code为0选择该流量时，只选择包含该策略id的所有广告主，如果有impression，则优先看impression的回复
	PromotionTargetId []int64 `protobuf:"varint,6,rep,packed,name=promotion_target_id,json=promotionTargetId,proto3" json:"promotion_target_id,omitempty"`
	// 实时指定对该设备的缓存时间，单位秒。
	// 需提前开启缓存功能，该值需高于配置的缓存时间，且不得超过7天
	ResponseCacheTime uint32 `protobuf:"varint,7,opt,name=response_cache_time,json=responseCacheTime,proto3" json:"response_cache_time,omitempty"`
	// 推荐商品信息
	DynamicProductInfos []*DynamicProductInfo `protobuf:"bytes,9,rep,name=dynamic_product_infos,json=dynamicProductInfos,proto3" json:"dynamic_product_infos,omitempty"`
	// 自定义策略，当code为0选择该流量时，只选择包含该策略的所有广告主，如果有impression，则优先看impression的回复
	OutTargetId          []string                  `protobuf:"bytes,10,rep,name=out_target_id,json=outTargetId,proto3" json:"out_target_id,omitempty"`
	TargetInfos          []*RtaResponse_TargetInfo `protobuf:"bytes,12,rep,name=target_infos,json=targetInfos,proto3" json:"target_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RtaResponse) Reset()         { *m = RtaResponse{} }
func (m *RtaResponse) String() string { return proto.CompactTextString(m) }
func (*RtaResponse) ProtoMessage()    {}
func (*RtaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{2}
}

func (m *RtaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtaResponse.Unmarshal(m, b)
}
func (m *RtaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtaResponse.Marshal(b, m, deterministic)
}
func (m *RtaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtaResponse.Merge(m, src)
}
func (m *RtaResponse) XXX_Size() int {
	return xxx_messageInfo_RtaResponse.Size(m)
}
func (m *RtaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RtaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RtaResponse proto.InternalMessageInfo

func (m *RtaResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *RtaResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RtaResponse) GetImpressions() []*RtaResponse_Impression {
	if m != nil {
		return m.Impressions
	}
	return nil
}

func (m *RtaResponse) GetProcessingTimeMs() int32 {
	if m != nil {
		return m.ProcessingTimeMs
	}
	return 0
}

func (m *RtaResponse) GetExcludeAdvertiserId() []uint64 {
	if m != nil {
		return m.ExcludeAdvertiserId
	}
	return nil
}

func (m *RtaResponse) GetPromotionTargetId() []int64 {
	if m != nil {
		return m.PromotionTargetId
	}
	return nil
}

func (m *RtaResponse) GetResponseCacheTime() uint32 {
	if m != nil {
		return m.ResponseCacheTime
	}
	return 0
}

func (m *RtaResponse) GetDynamicProductInfos() []*DynamicProductInfo {
	if m != nil {
		return m.DynamicProductInfos
	}
	return nil
}

func (m *RtaResponse) GetOutTargetId() []string {
	if m != nil {
		return m.OutTargetId
	}
	return nil
}

func (m *RtaResponse) GetTargetInfos() []*RtaResponse_TargetInfo {
	if m != nil {
		return m.TargetInfos
	}
	return nil
}

// Impression为高级功能，详见QA
type RtaResponse_Impression struct {
	// RtaRequest.Impression.id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// impression级状态码，0为选择该流量，非0为过滤，该状态码落地日志，方便定位问题
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// 指定禁止的广告主账号
	ExcludeAdvertiserId []uint64 `protobuf:"varint,3,rep,packed,name=exclude_advertiser_id,json=excludeAdvertiserId,proto3" json:"exclude_advertiser_id,omitempty"`
	// 指定策略，当code为0选择该流量时，只选择包含该策略id的所有广告主
	PromotionTargetId []int64 `protobuf:"varint,4,rep,packed,name=promotion_target_id,json=promotionTargetId,proto3" json:"promotion_target_id,omitempty"`
	// 自定义的策略，当code为0选择该流量时，只选择包含该策略的所有广告主
	OutTargetId          []string `protobuf:"bytes,5,rep,name=out_target_id,json=outTargetId,proto3" json:"out_target_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RtaResponse_Impression) Reset()         { *m = RtaResponse_Impression{} }
func (m *RtaResponse_Impression) String() string { return proto.CompactTextString(m) }
func (*RtaResponse_Impression) ProtoMessage()    {}
func (*RtaResponse_Impression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{2, 0}
}

func (m *RtaResponse_Impression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtaResponse_Impression.Unmarshal(m, b)
}
func (m *RtaResponse_Impression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtaResponse_Impression.Marshal(b, m, deterministic)
}
func (m *RtaResponse_Impression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtaResponse_Impression.Merge(m, src)
}
func (m *RtaResponse_Impression) XXX_Size() int {
	return xxx_messageInfo_RtaResponse_Impression.Size(m)
}
func (m *RtaResponse_Impression) XXX_DiscardUnknown() {
	xxx_messageInfo_RtaResponse_Impression.DiscardUnknown(m)
}

var xxx_messageInfo_RtaResponse_Impression proto.InternalMessageInfo

func (m *RtaResponse_Impression) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RtaResponse_Impression) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RtaResponse_Impression) GetExcludeAdvertiserId() []uint64 {
	if m != nil {
		return m.ExcludeAdvertiserId
	}
	return nil
}

func (m *RtaResponse_Impression) GetPromotionTargetId() []int64 {
	if m != nil {
		return m.PromotionTargetId
	}
	return nil
}

func (m *RtaResponse_Impression) GetOutTargetId() []string {
	if m != nil {
		return m.OutTargetId
	}
	return nil
}

// 策略绑定信息
type RtaResponse_TargetInfo struct {
	// 自定义策略，和请求级out_target_id一致
	OutTargetId string `protobuf:"bytes,1,opt,name=out_target_id,json=outTargetId,proto3" json:"out_target_id,omitempty"`
	// 用户加权值，取值范围[1~10] 10个等级，超出该范围按空处理
	UserWeight           int32    `protobuf:"varint,2,opt,name=user_weight,json=userWeight,proto3" json:"user_weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RtaResponse_TargetInfo) Reset()         { *m = RtaResponse_TargetInfo{} }
func (m *RtaResponse_TargetInfo) String() string { return proto.CompactTextString(m) }
func (*RtaResponse_TargetInfo) ProtoMessage()    {}
func (*RtaResponse_TargetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dd2abe9d0508f96, []int{2, 1}
}

func (m *RtaResponse_TargetInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtaResponse_TargetInfo.Unmarshal(m, b)
}
func (m *RtaResponse_TargetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtaResponse_TargetInfo.Marshal(b, m, deterministic)
}
func (m *RtaResponse_TargetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtaResponse_TargetInfo.Merge(m, src)
}
func (m *RtaResponse_TargetInfo) XXX_Size() int {
	return xxx_messageInfo_RtaResponse_TargetInfo.Size(m)
}
func (m *RtaResponse_TargetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RtaResponse_TargetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RtaResponse_TargetInfo proto.InternalMessageInfo

func (m *RtaResponse_TargetInfo) GetOutTargetId() string {
	if m != nil {
		return m.OutTargetId
	}
	return ""
}

func (m *RtaResponse_TargetInfo) GetUserWeight() int32 {
	if m != nil {
		return m.UserWeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("media.RtaRequest_OperatingSystem", RtaRequest_OperatingSystem_name, RtaRequest_OperatingSystem_value)
	proto.RegisterEnum("media.RtaRequest_RequestType", RtaRequest_RequestType_name, RtaRequest_RequestType_value)
	proto.RegisterEnum("media.RtaRequest_Device_DeviceIdTag", RtaRequest_Device_DeviceIdTag_name, RtaRequest_Device_DeviceIdTag_value)
	proto.RegisterEnum("media.RtaRequest_Device_CacheDeviceIdType", RtaRequest_Device_CacheDeviceIdType_name, RtaRequest_Device_CacheDeviceIdType_value)
	proto.RegisterType((*RtaRequest)(nil), "media.RtaRequest")
	proto.RegisterType((*RtaRequest_Impression)(nil), "media.RtaRequest.Impression")
	proto.RegisterType((*RtaRequest_Device)(nil), "media.RtaRequest.Device")
	proto.RegisterType((*RtaRequest_RequestInfo)(nil), "media.RtaRequest.RequestInfo")
	proto.RegisterType((*DynamicProductInfo)(nil), "media.DynamicProductInfo")
	proto.RegisterType((*DynamicProductInfo_Product)(nil), "media.DynamicProductInfo.Product")
	proto.RegisterType((*RtaResponse)(nil), "media.RtaResponse")
	proto.RegisterType((*RtaResponse_Impression)(nil), "media.RtaResponse.Impression")
	proto.RegisterType((*RtaResponse_TargetInfo)(nil), "media.RtaResponse.TargetInfo")
}

func init() { proto.RegisterFile("ug/api/proto/rta/ams/ams_rta.proto", fileDescriptor_0dd2abe9d0508f96) }

var fileDescriptor_0dd2abe9d0508f96 = []byte{
	// 1155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0x7a, 0xd7, 0x4e, 0x7c, 0x36, 0x49, 0xd7, 0x93, 0x16, 0x5c, 0xab, 0x55, 0x5d, 0xc3,
	0x85, 0x29, 0xc8, 0x81, 0x40, 0xb9, 0x83, 0xd6, 0x89, 0x5b, 0x69, 0x69, 0x6c, 0xb7, 0x63, 0x87,
	0x08, 0x84, 0x34, 0xda, 0xec, 0x4c, 0xdc, 0x81, 0xec, 0x4f, 0x76, 0xc6, 0xa5, 0x79, 0x11, 0x10,
	0x6f, 0xc3, 0x15, 0x52, 0xdf, 0x0a, 0xcd, 0xec, 0xec, 0xda, 0xae, 0x71, 0x2f, 0xb8, 0x88, 0xb2,
	0xe7, 0x3b, 0xbf, 0xf3, 0x9d, 0x33, 0x67, 0x0c, 0x9d, 0xf9, 0xec, 0x30, 0x48, 0xf9, 0x61, 0x9a,
	0x25, 0x32, 0x39, 0xcc, 0x64, 0x70, 0x18, 0x44, 0x42, 0xfd, 0x91, 0x4c, 0x06, 0x3d, 0x8d, 0xa2,
	0x6a, 0xc4, 0x28, 0x0f, 0x3a, 0x7f, 0xb9, 0x00, 0x58, 0x06, 0x98, 0x5d, 0xcf, 0x99, 0x90, 0x68,
	0x1f, 0x2a, 0x9c, 0x36, 0xad, 0xb6, 0xd5, 0xad, 0xe3, 0x0a, 0xa7, 0xe8, 0x63, 0xd8, 0xe6, 0x82,
	0xa4, 0x3c, 0x9e, 0x35, 0x2b, 0x6d, 0xab, 0xbb, 0x83, 0x6b, 0x5c, 0xbc, 0xe4, 0xf1, 0xcc, 0x28,
	0x24, 0x13, 0xb2, 0x69, 0x17, 0x8a, 0xa9, 0x8a, 0xf0, 0x3d, 0xb8, 0x3c, 0x4a, 0x33, 0x26, 0x04,
	0x4f, 0x62, 0xd1, 0x74, 0xda, 0x76, 0xd7, 0x3d, 0xba, 0xd7, 0xd3, 0xd9, 0x7a, 0x8b, 0x4c, 0x3d,
	0xbf, 0x34, 0xc2, 0xcb, 0x0e, 0xe8, 0x4b, 0xa8, 0x51, 0xf6, 0x86, 0x87, 0xac, 0x59, 0x6d, 0x5b,
	0x5d, 0xf7, 0xa8, 0xb9, 0xee, 0x3a, 0xd0, 0x7a, 0x6c, 0xec, 0xd0, 0x7d, 0x00, 0xc1, 0x25, 0x13,
	0x4c, 0x12, 0x4e, 0x9b, 0xb5, 0xb6, 0xd5, 0x75, 0x70, 0xdd, 0x20, 0x3e, 0x45, 0x4f, 0x61, 0x37,
	0xcb, 0x1d, 0x09, 0x8f, 0x2f, 0x93, 0xe6, 0x8e, 0x0e, 0x7b, 0x7f, 0x3d, 0xac, 0xf9, 0xef, 0xc7,
	0x97, 0x09, 0x76, 0xb3, 0x85, 0xd0, 0x7a, 0x02, 0xb0, 0xa8, 0x76, 0x8d, 0xa2, 0x87, 0xb0, 0x9b,
	0x5e, 0x05, 0x21, 0x8b, 0x58, 0xac, 0x0b, 0xa8, 0x68, 0x8d, 0x5b, 0x62, 0x3e, 0x6d, 0xbd, 0xab,
	0x42, 0x2d, 0x2f, 0x1a, 0x7d, 0x05, 0x95, 0x44, 0x68, 0xef, 0xfd, 0xa3, 0x87, 0xeb, 0x35, 0x8c,
	0x53, 0x96, 0x05, 0x92, 0xc7, 0xb3, 0xc9, 0x8d, 0x90, 0x2c, 0xc2, 0x95, 0x44, 0xa0, 0x07, 0xe0,
	0x72, 0x7a, 0x19, 0x90, 0x88, 0x3e, 0x16, 0xf3, 0xc8, 0xc4, 0x07, 0x05, 0x0d, 0x35, 0xa2, 0x0d,
	0x22, 0xc6, 0x0b, 0x03, 0xdb, 0x18, 0x44, 0x8c, 0x1b, 0x83, 0x47, 0xd0, 0x08, 0x62, 0x9a, 0x25,
	0x9c, 0x12, 0x4e, 0x0b, 0x33, 0x47, 0x9b, 0xdd, 0x32, 0x0a, 0x9f, 0x1a, 0xdb, 0xfb, 0x00, 0x51,
	0x10, 0x16, 0x46, 0x55, 0x6d, 0x54, 0x8f, 0x82, 0x70, 0x91, 0x2b, 0x09, 0x16, 0x41, 0x6a, 0x79,
	0x2e, 0x05, 0x19, 0x03, 0x45, 0x4f, 0xda, 0xdc, 0x36, 0xf4, 0xa4, 0x08, 0x81, 0xa3, 0xb4, 0x9a,
	0xf6, 0x3a, 0xd6, 0xdf, 0xe8, 0x25, 0x34, 0x68, 0x32, 0xbf, 0x90, 0x97, 0xf3, 0x2b, 0xc2, 0xa9,
	0x20, 0x57, 0x5c, 0xc8, 0x66, 0xbd, 0x6d, 0x77, 0xf7, 0x8f, 0x3e, 0xdd, 0xd4, 0x6e, 0xf3, 0xcf,
	0xa7, 0xd3, 0x60, 0x86, 0x6f, 0x15, 0xee, 0x3e, 0x15, 0xa7, 0x5c, 0x48, 0xf4, 0x0b, 0xdc, 0x0e,
	0x83, 0xf0, 0x35, 0xa3, 0x24, 0x1f, 0x0a, 0x4e, 0x89, 0xbc, 0x49, 0x59, 0x13, 0x34, 0xd1, 0x8f,
	0x36, 0x06, 0x3d, 0x51, 0x4e, 0x65, 0xe4, 0x9b, 0x94, 0x61, 0x94, 0xc7, 0x19, 0x98, 0x30, 0x0a,
	0xeb, 0xfc, 0x69, 0x81, 0xbb, 0x94, 0x1e, 0xdd, 0x81, 0x86, 0x3f, 0x78, 0xde, 0x27, 0xc3, 0xc1,
	0x63, 0x32, 0x18, 0x9f, 0x1d, 0x4f, 0x9f, 0x9f, 0x9d, 0x7a, 0x5b, 0x1a, 0x1e, 0x3e, 0xf3, 0x57,
	0x61, 0x0b, 0xb5, 0xe0, 0xa3, 0xfe, 0x68, 0x80, 0xc7, 0xfe, 0xc0, 0x1f, 0xac, 0xea, 0x2a, 0xe8,
	0x36, 0x78, 0xc3, 0xfe, 0xc9, 0x2a, 0x6a, 0xab, 0x40, 0xe3, 0xfe, 0xfb, 0xc6, 0x0e, 0x6a, 0xc0,
	0x9e, 0x86, 0x4b, 0xa8, 0xda, 0x49, 0xa1, 0xb1, 0x76, 0x04, 0xb4, 0x0b, 0x3b, 0x45, 0x79, 0xde,
	0x96, 0x96, 0x4c, 0x55, 0x9e, 0x85, 0x76, 0xc0, 0x51, 0x31, 0xbc, 0x8a, 0xc2, 0x8b, 0x24, 0x9e,
	0xad, 0x62, 0xaf, 0x14, 0xe9, 0x39, 0xc8, 0x85, 0x6d, 0x53, 0x9b, 0x57, 0x45, 0xdb, 0x60, 0x8f,
	0xfc, 0x53, 0xaf, 0xd6, 0xfa, 0xc7, 0x02, 0x77, 0xe9, 0xa6, 0x2c, 0x5f, 0x2f, 0xcd, 0x78, 0x3e,
	0xda, 0x9b, 0xaf, 0x97, 0x26, 0xb9, 0xb8, 0x5e, 0xba, 0xdc, 0x4f, 0x60, 0x2f, 0xa0, 0x6f, 0x58,
	0x26, 0xb9, 0x60, 0x59, 0x71, 0x83, 0x1c, 0xbc, 0xbb, 0x00, 0x7d, 0x8a, 0x0e, 0xa0, 0x1a, 0xa8,
	0xe9, 0xd5, 0xd3, 0xed, 0x60, 0x27, 0xa0, 0x3e, 0x45, 0x6d, 0x9d, 0x9b, 0xc8, 0x2c, 0x08, 0x99,
	0xd2, 0xe5, 0x23, 0x0d, 0x19, 0xbb, 0x9e, 0x2a, 0xc8, 0xa7, 0xe8, 0x2e, 0xec, 0x84, 0x57, 0x3c,
	0xfc, 0x4d, 0x69, 0xf3, 0x59, 0xde, 0xd6, 0xb2, 0x4f, 0x3b, 0xbf, 0xc2, 0xad, 0xf7, 0x6e, 0x1b,
	0xda, 0x07, 0x18, 0x4f, 0xc8, 0xd9, 0xe8, 0xc5, 0x68, 0x7c, 0x3e, 0xf2, 0xb6, 0x10, 0x40, 0x6d,
	0x3c, 0x21, 0xfe, 0x78, 0xe2, 0x59, 0x46, 0x67, 0x38, 0xf2, 0x2a, 0x46, 0x3e, 0xf7, 0x47, 0x83,
	0xf1, 0xf9, 0xc4, 0xb3, 0x8d, 0x3c, 0xf9, 0x69, 0x78, 0xec, 0xf7, 0x47, 0x39, 0x7b, 0xe3, 0x09,
	0xf9, 0xa1, 0xff, 0x63, 0xdf, 0xab, 0x76, 0xbe, 0x29, 0x39, 0xd3, 0x27, 0x46, 0xb0, 0x3f, 0x1a,
	0xe3, 0x61, 0xff, 0x94, 0xe0, 0x67, 0xaf, 0xce, 0x9e, 0x4d, 0xa6, 0xde, 0x96, 0x6a, 0xc0, 0xc9,
	0xa9, 0x7f, 0xf2, 0xa2, 0x84, 0xac, 0xce, 0x3b, 0x0b, 0xd0, 0xe0, 0x26, 0x0e, 0x22, 0x1e, 0xbe,
	0xcc, 0x12, 0x3a, 0x0f, 0x73, 0xc6, 0x1f, 0x80, 0x9b, 0xe6, 0x22, 0xb9, 0xe2, 0x17, 0x9a, 0x70,
	0x07, 0x83, 0x81, 0x4e, 0xf9, 0x05, 0xfa, 0x0e, 0x76, 0x8c, 0x24, 0x9a, 0x15, 0xbd, 0x7f, 0x8b,
	0x4d, 0xb3, 0x1e, 0xad, 0x67, 0xbe, 0x71, 0xe9, 0xd2, 0x9a, 0xc0, 0xb6, 0x01, 0x97, 0x76, 0x9d,
	0xa3, 0x77, 0x5d, 0x4b, 0x45, 0xe6, 0x49, 0xc6, 0xe5, 0x8d, 0xee, 0xd2, 0x1e, 0x2e, 0x65, 0x74,
	0x0f, 0xea, 0x92, 0x47, 0x4c, 0xc8, 0x20, 0x4a, 0x4d, 0x97, 0x16, 0x40, 0xe7, 0x8f, 0x1a, 0xb8,
	0x7a, 0x18, 0x44, 0x9a, 0xc4, 0x42, 0x2f, 0xed, 0x72, 0x2b, 0x17, 0xdb, 0xb4, 0x5e, 0x2c, 0x5d,
	0xaa, 0xb6, 0x46, 0x98, 0x50, 0x66, 0x92, 0xe8, 0x6f, 0xf4, 0x64, 0xf5, 0x65, 0xb1, 0xf5, 0xc9,
	0x56, 0x06, 0x2d, 0x8f, 0xbd, 0xf1, 0x69, 0xf9, 0x02, 0x50, 0x9a, 0x25, 0xa1, 0x12, 0xe3, 0x19,
	0x51, 0xb5, 0x91, 0x48, 0xe8, 0xa1, 0xa9, 0x62, 0x6f, 0xa1, 0x99, 0xf2, 0x88, 0x0d, 0x05, 0xfa,
	0x16, 0xee, 0xb0, 0xb7, 0xe1, 0xd5, 0x9c, 0x32, 0xb2, 0x3a, 0x9e, 0xd5, 0xb6, 0xdd, 0x75, 0x8e,
	0x2b, 0x9e, 0x85, 0x0f, 0x8c, 0x41, 0x7f, 0x79, 0x52, 0x8f, 0xe0, 0x20, 0xcd, 0x92, 0x28, 0x91,
	0x3c, 0x89, 0x89, 0x0c, 0xb2, 0x59, 0xf1, 0x2e, 0xd9, 0x5d, 0x5b, 0x7b, 0x35, 0x4a, 0xf5, 0x54,
	0x6b, 0x7d, 0x8a, 0x7a, 0x70, 0x90, 0x99, 0xea, 0x89, 0xde, 0x3f, 0xba, 0x3a, 0xbd, 0x45, 0xf7,
	0x70, 0xa3, 0x50, 0xe9, 0x9b, 0xae, 0xaa, 0x43, 0x43, 0xb8, 0x43, 0xf3, 0x56, 0x92, 0x62, 0x14,
	0xd4, 0xdb, 0x26, 0xf4, 0x12, 0x75, 0x8f, 0xee, 0x6e, 0x6c, 0x37, 0x3e, 0xa0, 0x6b, 0x98, 0x40,
	0x1d, 0xd8, 0x4b, 0xe6, 0x72, 0xa9, 0x58, 0x68, 0xdb, 0xea, 0x0d, 0x4b, 0xe6, 0xb2, 0x2c, 0xf1,
	0x29, 0xec, 0x16, 0x7a, 0x9d, 0x69, 0x77, 0x23, 0xfd, 0xc6, 0x45, 0x3f, 0xa3, 0xb2, 0xfc, 0x16,
	0xad, 0xbf, 0xad, 0x0f, 0xbe, 0xa3, 0xff, 0xd5, 0xf2, 0x8d, 0x3d, 0xb0, 0xff, 0x57, 0x0f, 0x9c,
	0x0f, 0xf5, 0x60, 0x8d, 0x84, 0xea, 0x1a, 0x09, 0xad, 0x57, 0x00, 0x8b, 0xd3, 0xad, 0x7b, 0xe4,
	0x87, 0x59, 0xa1, 0xed, 0x01, 0xb8, 0x73, 0x55, 0xf3, 0xef, 0x8c, 0xcf, 0x5e, 0x4b, 0x7d, 0xb8,
	0x2a, 0x06, 0x05, 0x9d, 0x6b, 0xe4, 0xf8, 0xf3, 0x9f, 0x3f, 0x9b, 0x71, 0xd9, 0x53, 0xc7, 0xed,
	0x25, 0x41, 0x2f, 0x4c, 0xa2, 0xc3, 0xb7, 0xd7, 0x87, 0x2b, 0x3f, 0xe0, 0x34, 0xc5, 0xea, 0xe7,
	0xdb, 0x45, 0x4d, 0x03, 0x5f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xaf, 0x03, 0xb0, 0xe1,
	0x09, 0x00, 0x00,
}
